<?xml version="1.0"?>
<!--
/**
 * Copyright 2007 Jens Dietrich Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
 * Unless required by applicable law or agreed to in writing, software distributed under the 
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language governing permissions 
 * and limitations under the License.
 */
 -->
	
<project name="take" default="jar">
	<property name="name" value="take"/>
	<property name="version" value="1.5"/>
	<property name="debug" value="on"/>
	<property name="src.dir" value="src"/>
	<property name="classes.dir" value="classes"/>
	<property name="docs.dir" value="docs"/>
	<property name="lib.dir" value="lib"/>
	<property name="config.dir" value="misc"/>
	<property name="build.dir" value="build"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="build.tmp" value="${build.dir}/tmp"/>
	<property name="build.doc" value="${build.dir}/doc"/>
	<property name="build.main.jar" value="${build.lib}/${name}-${version}"/>
	<property name="build.javac.1_5.jar" value="${build.lib}/${name}-javac1.5-${version}"/>
	<property name="build.javac.1_6.jar" value="${build.lib}/${name}-javac1.6-${version}"/>
	<property name="build.main.jar" value="${build.lib}/${name}-${version}"/>
	<property name="build.script.jar" value="${build.lib}/${name}-script-${version}"/>
	<property name="build.rt.jar" value="${build.lib}/${name}-rt-${version}"/>
	<property name="build.test.jar" value="${build.lib}/${name}-tests-${version}"/>
	<property name="qareports.dir" value="qa"/>
	<property name="report.junit" value="${qareports.dir}/junit"/>
	<property name="report.jdepend" value="${qareports.dir}/jdepend"/>
	<property name="build.test.jar" value="${build.lib}/${name}-tests-${version}"/>
	<property name="build.example.jar" value="${build.lib}/${name}-examples-${version}"/>
	<property name="build.userv.jar" value="${build.lib}/${name}-userv-${version}"/>
	<property name="build.userv.rt.jar" value="${build.lib}/${name}-userv-rt-${version}"/>
	
	<path id="build.classpath">
        <fileset dir="lib">
            <include name="**/*.jar" />
        </fileset>
    </path>
	<property name="build" value="./build"/>
	<property name="classes" value="${build}/classes"/>
<!-- Prepare the output directories-->	
<target name="prepare" description="Prepare the build directories">
	<mkdir dir="${build.dir}"/>
	<mkdir dir="${build.classes}"/>
	<mkdir dir="${build.lib}"/>
	<mkdir dir="${build.tmp}"/>
	<mkdir dir="${build.doc}"/>
	<mkdir dir="${report.junit}"/>
	<mkdir dir="${report.jdepend}"/>
</target>
<!-- Compiles the classes -->	
<target name="compile" depends="prepare" description="Compile the whole project">
	<javac destdir="${build.classes}" 
        debug="${debug}" 
        deprecation="on"
        optimize="off"
        srcdir="${src.dir}"
        classpathref="build.classpath"
	/>
	<!-- copy velocity templates, scripts and annotation stores (they are loaded by the class loader) -->
    <copy todir="${build.classes}">
	    <fileset dir="${src.dir}">
	      	<include name="**/*.vm"/>
	    	<include name="**/*.take"/>
	    	<include name="**/*.xml"/>
	    </fileset>
	</copy>

</target>

<!-- Tests the project, using JUnit tests -->
<target name="tests" depends="compile" description="Tests the project">
	<!-- fork has to be true, otherwise the generated classes will not be loaded -->
	<junit printsummary="yes" haltonfailure="no" fork="yes">
		<classpath>
			<pathelement location="${build.classes}"/>
	        <fileset dir="lib">
	            <include name="**/*.jar" />
	        </fileset>						
		</classpath>
		<formatter type="xml"/>
		<test todir="${report.junit}" name="test.nz.org.take.nscript.ParserTests"/>
		<test todir="${report.junit}" name="test.nz.org.take.nscript.JSPELParserTests"/>
		<test todir="${report.junit}" name="test.nz.org.take.nscript.RegExTests"/>
		<test todir="${report.junit}" name="test.nz.org.take.nscript.TokenizerTests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.verification.VerificationTests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario1.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario2.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario3.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario4.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario5.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario6.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario7.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario8.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario9.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario10.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.scenario11.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.annotations.Tests"/>
		<test todir="${report.junit}" name="example.nz.org.take.compiler.userv.testcases.UservTestCases"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.issue22.Tests"/>
		<test todir="${report.junit}" name="test.nz.org.take.compiler.issue23.Tests"/>
	</junit>
	<!-- report -->
	<junitreport todir="${report.junit}">
	  <fileset dir="${report.junit}">
	    <include name="TEST-*.xml"/>
	  </fileset>
	  <report format="frames" todir="${report.junit}"/>
	</junitreport>
</target>
	
<!-- build the jars -->
<target name="jar" depends="tests" description="Creates the jar file">
  	<tstamp>
    	<format property="today" pattern="ddMMyyhhmm"/>
  	</tstamp>
	
	<!-- api and compiler -->
	<filter token="TITLE" value="${name} API and reference compiler"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.main.jar}.build${today}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="nz/**/*.*"
		excludes="example/**/*.*,test/**/*.*,nz/org/take/rt/*.*,nz/org/take/nscript/**/*.*,nz/org/take/deployment/ant/*.*,nz/org/take/deployment/jsr199/*.*"
	/>
	
	<!-- java 1.5 compiler adapter -->
	<filter token="TITLE" value="${name} Java 1.5 compiler adapter"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.javac.1_5.jar}.build${today}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="nz/org/take/deployment/ant/*.*"
	/>
	
	<!-- java 1.6 compiler adapter -->
	<filter token="TITLE" value="${name} Java 1.6+ compiler adapter"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.javac.1_6.jar}.build${today}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="nz/org/take/deployment/jsr199/*.*"
	/>
	
	<!-- runtime classes -->
	<filter token="TITLE" value="${name} runtime classes"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.rt.jar}.build${today}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="nz/org/take/rt/*.*"
	/>
	
	<!-- scripting -->
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<filter token="TITLE" value="${name} scripting language"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.script.jar}.build${today}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="nz/org/take/nscript/**/*.*,services/**/*.*"
	/>
	<mkdir dir="${build.tmp}/services"/>
	
	<!-- tests -->
	<filter token="TITLE" value="${name} JUnit test cases"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.test.jar}.build${today}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="test/**/*.*"
	/>
	
	<!-- userv example -->
	<filter token="TITLE" value="$UServ example"/>
	<filter token="MAIN" value="example.nz.org.take.compiler.userv.main.Main"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/userv.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.userv.jar}.build${today}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="example/nz/org/take/compiler/userv/**/*.*"
	/>
	
	<!-- userv example runtime only -->
	<filter token="TITLE" value="$UServ example"/>
	<filter token="MAIN" value="example.nz.org.take.compiler.userv.main.Main"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/userv.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.userv.rt.jar}.build${today}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="example/nz/org/take/compiler/userv/domainmodel/*.*,example/nz/org/take/compiler/userv/generated/*.*,example/nz/org/take/compiler/userv/main/*.*,example/nz/org/take/compiler/userv/rules/*.*"
	/>
	
	<!-- examples -->
	<filter token="TITLE" value="${name} examples"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.example.jar}.build${today}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="example/nz/org/take/compiler/example*/**/*.*"
	/>
</target>
	
<!-- build the jars without timestamp -->
<target name="jar2" depends="tests" description="Creates the jar file">
	
	<!-- api and compiler -->
	<filter token="TITLE" value="${name} API and reference compiler"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.main.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		excludes="example/**/*.*,test/**/*.*,nz/org/take/rt/*.*,nz/org/take/nscript/**/*.*,nz/org/take/deployment/ant/*.*,nz/org/take/deployment/jsr199/*.*"
		includes="nz/**/*.*"
	/>
	
	<!-- runtime classes -->
	<filter token="TITLE" value="${name} runtime classes"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.rt.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="nz/org/take/rt/*.*"
	/>
	
	<!-- scripting -->
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<filter token="TITLE" value="${name} scripting language"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.script.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="nz/org/take/nscript/**/*.*,services/**/*.*"
	/>
	<mkdir dir="${build.tmp}/services"/>
	
	<!-- tests -->
	<filter token="TITLE" value="${name} JUnit test cases"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.test.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="test/**/*.*"
	/>
	
	<!-- userv example -->
	<filter token="TITLE" value="UServ example"/>
	<filter token="MAIN" value="example.nz.org.take.compiler.userv.main.Main"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/userv.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.userv.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="example/nz/org/take/compiler/userv/**/*.*"
	/>
	
	<!-- java 1.5 compiler adapter -->
	<filter token="TITLE" value="${name} Java 1.5 compiler adapter"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.javac.1_5.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="nz/org/take/deployment/ant/*.*"
	/>
	
	<!-- java 1.6 compiler adapter -->
	<filter token="TITLE" value="${name} Java 1.6+ compiler adapter"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.javac.1_6.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="nz/org/take/deployment/jsr199/*.*"
	/>
	
	
	<!-- userv example runtime only -->
	<filter token="TITLE" value="$UServ example"/>
	<filter token="MAIN" value="example.nz.org.take.compiler.userv.main.Main"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/userv.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.userv.rt.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="example/nz/org/take/compiler/userv/domainmodel/*.*,example/nz/org/take/compiler/userv/generated/*.*,example/nz/org/take/compiler/userv/main/*.*,example/nz/org/take/compiler/userv/rules/*.*"
	/>
	
	<!-- examples -->
	<filter token="TITLE" value="${name} examples"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/${name}.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${build.example.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="example/nz/org/take/compiler/example*/**/*.*"
	/>
</target>
	
<!-- dependency analysis -->	
<target name="jdepend" depends="compile" description="Dependency analysis">
	  <jdepend format="xml" outputfile="${report.jdepend}/jdepend-report.xml">
	      <exclude name="java.*"/>
	      <exclude name="javax.*"/>
	  	  <exclude name="test.*"/>
		  <classespath>
			<pathelement location="${build.classes}"/>			
		  </classespath>
	  	<classpath location="${build.classes}" />
	  </jdepend>

	  <style basedir="${report.jdepend}" destdir="${report.jdepend}"
	         includes="jdepend-report.xml" 
	         style="misc/xsl/jdepend.xsl" />
</target>
	
<!-- build release -->	
<target name="release" depends="clean,jar2,jdepend" description="Build release">
	  <zip destfile="${build.dir}/take-${version}.zip">
	    <zipfileset dir="${build.lib}" prefix="lib"/>
	  	<zipfileset dir="${lib.dir}" prefix="lib-required"/>
	  	<zipfileset dir="testdata" prefix="testdata"/>
	    <zipfileset dir="${src.dir}" prefix="src"/>
	    <zipfileset dir="${qareports.dir}" prefix="qa"/>
	  </zip>
</target>
	
<!-- clean up -->	
<target name="clean">
	<delete dir = "${qareports}"/>
	<delete dir = "${classes}"/>
	<delete dir = "${build}"/>
</target>
<!-- clean the working dir -->	
<target name="cleanWorkingDir">
	<delete dir = "takeWorkingDir"/>
</target>
</project>