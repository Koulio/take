package test.nz.org.take.compiler.issue22.generated;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Thu Oct 30 21:42:57 NZDT 2008
 */
@SuppressWarnings("unchecked")
class KBFragement_getRecords {
    /**
     * Method generated for query /record[in,out]
     * @param parent input parameter generated from slot 0
     * @return an iterator for instances of Record
    */
    public static ResultSet<Record> getRecords(
        final test.nz.org.take.compiler.issue22.Parent parent) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<Record> _result = new ResultSet(KBFragement_getRecords.getRecords(
                    parent, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /record[in,out]
     * @param parent input parameter generated from slot 0
     * @return an iterator for instances of Record
    */
    static ResourceIterator<Record> getRecords(
        final test.nz.org.take.compiler.issue22.Parent parent,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<Record> result = new IteratorChain<Record>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // rule1  IF equals(getName(<parent>),a parent) AND children(<parent>,<child>) AND equals(getName(<child>),a child) THEN /record(<parent>,<child>)
                    case 0:
                        return getRecords_0(parent,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // rule1  IF equals(getName(<parent>),a parent) AND children(<parent>,<child>) AND equals(getName(<child>),a child) THEN /record(<parent>,<child>)
                    case 0:
                        return "rule1";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /record[in,out]
     * @param parent input parameter generated from slot 0
     * @return an iterator for instances of Record
    */
    private static ResourceIterator<Record> getRecords_0(
        final test.nz.org.take.compiler.issue22.Parent parent,
        final DerivationController _derivation) {
        _derivation.log("rule1", DerivationController.RULE, parent,
            DerivationController.NIL);

        // Variable bindings in rule:  IF equals(getName(<parent>),a parent) AND children(<parent>,<child>) AND equals(getName(<child>),a child) THEN /record(<parent>,<child>)
        class bindingsInRule1 {
            // Property generated for term  "a child"
            java.lang.String p1;

            // Property generated for term  "getName(<child>)"
            java.lang.String p2;

            // Property generated for term  "a parent"
            java.lang.String p3;

            // Property generated for term  "<child>"
            test.nz.org.take.compiler.issue22.Child p4;

            // Property generated for term  "<parent>"
            test.nz.org.take.compiler.issue22.Parent p5;

            // Property generated for term  "getName(<parent>)"
            java.lang.String p6;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = "a child";
        bindings.p3 = "a parent";
        bindings.p5 = parent;
        bindings.p6 = parent.getName();

        // code for prereq equals(getName(<parent>),a parent)
        final ResourceIterator<equals> iterator1 = KBFragement_equals_11.equals_11(bindings.p6,
                "a parent", _derivation.increaseDepth());

        // code for prereq children(<parent>,<child>)
        final ResourceIterator<children> iterator2 = new NestedIterator<equals, children>(iterator1) {
                public ResourceIterator<children> getNextIterator(equals object) {
                    bindings.p6 = object.slot1;
                    bindings.p3 = (java.lang.String) "a parent";

                    return KBFragement_children_10.children_10(bindings.p5,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq equals(getName(<child>),a child)
        final ResourceIterator<equals> iterator3 = new NestedIterator<children, equals>(iterator2) {
                public ResourceIterator<equals> getNextIterator(children object) {
                    bindings.p5 = object.slot1;
                    bindings.p4 = object.slot2;

                    return KBFragement_equals_11.equals_11(bindings.p2,
                        bindings.p1, _derivation.increaseDepth());
                }
            };

        // code for prereq /record(<parent>,<child>)
        final ResourceIterator<Record> iterator4 = new NestedIterator<equals, Record>(iterator3) {
                public ResourceIterator<Record> getNextIterator(equals object) {
                    bindings.p2 = object.slot1;
                    bindings.p1 = (java.lang.String) "a child";

                    return new SingletonIterator(new Record(bindings.p5,
                            bindings.p4));
                }
            };

        return iterator4;
    }
}
