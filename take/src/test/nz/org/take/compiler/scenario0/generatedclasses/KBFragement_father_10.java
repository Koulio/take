package test.nz.org.take.compiler.scenario0.generatedclasses;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Tue Jul 28 22:00:09 NZST 2009
 */
@SuppressWarnings("unchecked")
class KBFragement_father_10 {
    /**
     * Method generated for query /father[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of father
    */
    public static ResultSet<father> father_10(final java.lang.String son) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<father> _result = new ResultSet(KBFragement_father_10.father_10(
                    son, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /father[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of father
    */
    static ResourceIterator<father> father_10(final java.lang.String son,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<father> result = new IteratorChain<father>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // fact1 /father(jens,max)
                    case 0:
                        return father_10_0(son,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // fact1 /father(jens,max)
                    case 0:
                        return "fact1";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /father[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of father
    */
    private static father father_10_0(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("fact1", DerivationController.FACT, son,
            DerivationController.NIL);

        father result = new father();
        result.son = son;

        if (son.equals("jens")) {
            result.father = "max";

            return result;
        }

        return null;
    }
}
