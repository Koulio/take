package test.nz.org.take.compiler.scenario0.generatedclasses;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Tue Jul 28 15:39:59 NZST 2009
 */
@SuppressWarnings("unchecked")
class KBFragement_son_01 {
    /**
     * Method generated for query /son[out,in]
     * @param son input parameter generated from slot 1
     * @return an iterator for instances of son
    */
    public static ResultSet<son> son_01(final java.lang.String son) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<son> _result = new ResultSet(KBFragement_son_01.son_01(son,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /son[out,in]
     * @param son input parameter generated from slot 1
     * @return an iterator for instances of son
    */
    static ResourceIterator<son> son_01(final java.lang.String son,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<son> result = new IteratorChain<son>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // rule1  IF /father(<x>,<y>) AND x=='jens' THEN /son(<y>,<x>)
                    case 0:
                        return son_01_0(son, _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // rule1  IF /father(<x>,<y>) AND x=='jens' THEN /son(<y>,<x>)
                    case 0:
                        return "rule1";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /son[out,in]
     * @param son input parameter generated from slot 1
     * @return an iterator for instances of son
    */
    private static ResourceIterator<son> son_01_0(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("rule1", DerivationController.RULE,
            DerivationController.NIL, son);

        // Variable bindings in rule:  IF /father(<x>,<y>) AND x=='jens' THEN /son(<y>,<x>)
        class bindingsInRule1 {
            // Property generated for term  "<x>"
            java.lang.String p1;

            // Property generated for term  "<y>"
            java.lang.String p2;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = son;

        // evaluating expression x=='jens'
        // with parameters [son]
        // code for prereq /father(<x>,<y>)
        final ResourceIterator<father> iterator1 = KBFragement_father_10.father_10(son,
                _derivation.increaseDepth());

        // code for prereq /son(<y>,<x>)
        final ResourceIterator<son> iterator2 = new NestedIterator<father, son>(iterator1) {
                public ResourceIterator<son> getNextIterator(father object) {
                    bindings.p1 = object.son;
                    bindings.p2 = object.father;

                    return new SingletonIterator(new son(bindings.p2,
                            bindings.p1));
                }
            };

        return iterator2;
    }
}
