/**
 * Copyright 2007 Jens Dietrich Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
 * Unless required by applicable law or agreed to in writing, software distributed under the 
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language governing permissions 
 * and limitations under the License.
 */

package nz.org.take.compiler;

import java.util.List;

import nz.org.take.KnowledgeBase;



/**
 * Compiler interface. Generates classes for a kb.
 * @author <a href="http://www-ist.massey.ac.nz/JBDietrich/">Jens Dietrich</a>
 */

public interface Compiler {
	
	/**
	 * Specify whether annotations should be added automatically.
	 * @param boolean v
	 */
	public void setAutoAnnotate(boolean v);
	/**
	 * Indicates  whether annotations are added automatically.
	 * @return boolean
	 */
	public boolean isAutoAnnotate();
		
	/**
	 * Compile the kb with the list of queries in the kb.
	 * @param kb a knowledge base
	 * @throws CompilerException
	 */
	public void compile (KnowledgeBase kb) throws CompilerException ;
	/**
	 * Create a public interface for the knowlegde base.
	 * This method will create an interface containing the public methods of the kb to be generated by the kb.
	 * it will also create the referenced types - the data types for the predicates referenced in the queries.
	 * @param kb a knowledge base
	 * @throws CompilerException
	 */
	public void compileInterface (KnowledgeBase kb) throws CompilerException ;
	/**
	 * Get the name generator.
	 * @return Returns the nameGenerator.
	 */
	public NameGenerator getNameGenerator();
	/**
	 * Set the name generator.
	 * @param nameGenerator The nameGenerator to set.
	 */
	public void setNameGenerator(NameGenerator nameGenerator);
	/**
	 * Get the package name for the code to generate.
	 * @return Returns the package name.
	 */
	public String getPackageName();
	/**
	 * Set the package name for the code to generate.
	 * @param packageName the package name.
	 */
	public void setPackageName(String packageName);
	/**
	 * Get the name of the class to generate.
	 * @return a class name.
	 */
	public String getClassName();
	/**
	 * Set the class name for the code to generate.
	 * @param className the class name.
	 */
	public void setClassName(String className);
	/**
	 * Get the location used to generate and compile code.
	 * @return a location.
	 */
	public Location getLocation();
	/**
	 * Set the location used to generate and compile code.
	 * @param location  the location.
	 */
	public void setLocation(Location location);
	/**
	 * Get the (fully qualified) names of  interfaces to be implemented by the generated kb class.
	 * Can be null (no interfaces)
	 * @return Returns interface names.
	 */
	public String[] getInterfaceNames();
	/**
	 * Set the import statements (without ; at the end) to be used in the generated kb class.
	 * @param names the names.
	 */
	public void setImportStatements(String... statements);
	/**
	 * Get the import statements (without ; at the end) to be used in the generated kb class.
	 * Can be null (no imports)
	 * @return Returns import statements.
	 */
	public String[] getImportStatements();
	/**
	 * Set the (fully qualified) names of  interfaces to be implemented by the generated kb class.
	 * @param names the names.
	 */
	public void setInterfaceNames(String... names);
	/**
	 * Add a source code transformer.
	 * @param a transformer
	 */
	public void add(SourceTransformation transformer);
	/**
	 * Remove a source code transformer.
	 * @param a transformer
	 */
	public void remove(SourceTransformation transformer);
	/**
	 * Get a list of source transformers installed.
	 * @return a list of transformations
	 */
	public List<SourceTransformation> getSourceTransformers();
	/**
	 * Generate data classes for predicates used in queries. If set to false, a package should be imported that contains the 
	 * already generated classes. This is usually used if a separete interface is generated. 
	 * @param value true or false
	 */
	public void setGenerateDataClassesForQueryPredicates(boolean value);
	/**
	 * Whether to generate data classes for predicates used in queries. If set to false, a package should be imported that contains the 
	 * already generated classes. This is usually used if a separete interface is generated. 
	 * @return true or false, the default should be true
	 */
	public boolean isGenerateDataClassesForQueryPredicates();
}
