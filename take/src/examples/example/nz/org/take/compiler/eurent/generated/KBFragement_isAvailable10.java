package example.nz.org.take.compiler.eurent.generated;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Fri Feb 01 10:15:14 NZDT 2008
 */
@SuppressWarnings("unchecked")
class KBFragement_isAvailable10 {
    /**
     * Method generated for query /availableAt[in,out]
     * @param car input parameter generated from slot 0
     * @return an iterator for instances of IsAvailable
    */
    public static ResultSet<IsAvailable> isAvailable10(
        final example.nz.org.take.compiler.eurent.RentalCar car) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsAvailable> _result = new ResultSet(KBFragement_isAvailable10.isAvailable10(
                    car, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /availableAt[in,out]
     * @param car input parameter generated from slot 0
     * @return an iterator for instances of IsAvailable
    */
    static ResourceIterator<IsAvailable> isAvailable10(
        final example.nz.org.take.compiler.eurent.RentalCar car,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsAvailable> result = new IteratorChain<IsAvailable>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // rule1  IF storedAt(<car>,<branch>) AND isScheduledForService(<car>) AND assignedTo(<car>,<rental>) THEN /availableAt(<car>,<branch>)
                    case 0:
                        return isAvailable10_0(car,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // rule1  IF storedAt(<car>,<branch>) AND isScheduledForService(<car>) AND assignedTo(<car>,<rental>) THEN /availableAt(<car>,<branch>)
                    case 0:
                        return "rule1";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /availableAt[in,out]
     * @param car input parameter generated from slot 0
     * @return an iterator for instances of IsAvailable
    */
    private static ResourceIterator<IsAvailable> isAvailable10_0(
        final example.nz.org.take.compiler.eurent.RentalCar car,
        final DerivationController _derivation) {
        _derivation.log("rule1", DerivationController.RULE, car,
            DerivationController.NIL);

        // Variable bindings in rule:  IF storedAt(<car>,<branch>) AND isScheduledForService(<car>) AND assignedTo(<car>,<rental>) THEN /availableAt(<car>,<branch>)
        class bindingsInRule1 {
            // Property generated for term  "<rental>"
            example.nz.org.take.compiler.eurent.Rental p1;

            // Property generated for term  "<branch>"
            example.nz.org.take.compiler.eurent.Branch p2;

            // Property generated for term  "<car>"
            example.nz.org.take.compiler.eurent.RentalCar p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p3 = car;

        // code for prereq storedAt(<car>,<branch>)
        final ResourceIterator<storedAt> iterator1 = KBFragement_storedAt_10.storedAt_10(car,
                _derivation.increaseDepth());

        // code for prereq isScheduledForService(<car>)
        final ResourceIterator<not_isScheduledForService> iterator2 = new NestedIterator<storedAt, not_isScheduledForService>(iterator1) {
                public ResourceIterator<not_isScheduledForService> getNextIterator(
                    storedAt object) {
                    bindings.p3 = object.slot1;
                    bindings.p2 = object.slot2;

                    return KBFragement_not_isScheduledForService_1.not_isScheduledForService_1(bindings.p3,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq assignedTo(<car>,<rental>)
        final ResourceIterator<not_assignedTo> iterator3 = new NestedIterator<not_isScheduledForService, not_assignedTo>(iterator2) {
                public ResourceIterator<not_assignedTo> getNextIterator(
                    not_isScheduledForService object) {
                    bindings.p3 = object.slot1;

                    return KBFragement_not_assignedTo_10.not_assignedTo_10(bindings.p3,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq /availableAt(<car>,<branch>)
        final ResourceIterator<IsAvailable> iterator4 = new NestedIterator<not_assignedTo, IsAvailable>(iterator3) {
                public ResourceIterator<IsAvailable> getNextIterator(
                    not_assignedTo object) {
                    bindings.p3 = object.slot1;
                    bindings.p1 = object.slot2;

                    return new SingletonIterator(new IsAvailable(bindings.p3,
                            bindings.p2));
                }
            };

        return iterator4;
    }
}
